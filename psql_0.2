-- =============================================================================
-- SCHEMA CONFIDENTIALITY AUDIT SCRIPT (v2 - with Login Status)
-- This script is focused purely on confidentiality risk (read access).
-- It checks for USAGE on the schema, SELECT on each table, and now
-- explicitly states whether a role has LOGIN permission.
-- =============================================================================
DO $$
DECLARE
    -- V V V  --  CONFIGURE YOUR SCHEMA NAME HERE  --  V V V
    schema_to_audit TEXT := 'public';
    -- ^ ^ ^  --  CONFIGURE YOUR SCHEMA NAME HERE  --  ^ ^ ^

    tbl RECORD;
    rol RECORD;
BEGIN
    RAISE NOTICE 'Starting CONFIDENTIALITY audit for schema: %', schema_to_audit;
    RAISE NOTICE '====================================================';
    RAISE NOTICE '';

    -- Part 1: Audit USAGE permission on the Schema itself
    RAISE NOTICE 'SCHEMA USAGE PERMISSIONS (Prerequisite for any read access)';
    RAISE NOTICE '----------------------------------------------------';
    FOR rol IN SELECT rolname FROM pg_catalog.pg_roles ORDER BY rolname LOOP
        IF has_schema_privilege(rol.rolname, schema_to_audit, 'USAGE') THEN
            RAISE NOTICE '- Role/User "%" has USAGE permission.', rol.rolname;
        END IF;
    END LOOP;
    RAISE NOTICE '----------------------------------------------------';


    -- Part 2: Audit SELECT permissions for each table in the schema
    FOR tbl IN
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = schema_to_audit
        ORDER BY table_name
    LOOP
        RAISE NOTICE '';
        RAISE NOTICE 'TABLE: %', tbl.table_name;
        RAISE NOTICE '-----------------------------------------------------------------';
        RAISE NOTICE 'ROLE / USER                | LOGIN? | SELECT (Read) |';
        RAISE NOTICE '---------------------------+--------+---------------|';

        -- For each table, loop through every role and user in the database
        FOR rol IN
            SELECT rolname, rolcanlogin
            FROM pg_catalog.pg_roles
            ORDER BY rolname
        LOOP
            -- Check if the role has SELECT privileges on the table
            IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'SELECT') THEN
                RAISE NOTICE '% | % |       X       |',
                    rpad(rol.rolname, 26),
                    CASE WHEN rol.rolcanlogin THEN ' Yes  ' ELSE ' No   ' END;
            END IF;
        END LOOP;
    END LOOP;
    RAISE NOTICE '';
    RAISE NOTICE 'Confidentiality audit complete.';
END $$;
