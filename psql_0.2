-- =============================================================================
-- SCHEMA PERMISSION MATRIX SCRIPT (v5 - Effective Permissions Only)
-- This script now only shows users/roles in the table matrix if they have
-- the prerequisite USAGE permission on the schema, providing a true
-- picture of effective permissions.
-- =============================================================================
DO $$
DECLARE
    -- V V V  --  CONFIGURE YOUR SCHEMA NAME HERE  --  V V V
    schema_to_audit TEXT := 'public';
    -- ^ ^ ^  --  CONFIGURE YOUR SCHEMA NAME HERE  --  ^ ^ ^

    -- Declare record variables to hold the current row during loops.
    tbl RECORD;
    rol RECORD;
    permission_matrix TEXT;
BEGIN
    RAISE NOTICE 'Starting effective permission audit for schema: %', schema_to_audit;
    RAISE NOTICE '====================================================';

    -- Part 1: Audit permissions for each table in the schema
    FOR tbl IN
        -- We query information_schema.tables as it's the standard, portable
        -- way to get a list of tables within a specific schema.
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = schema_to_audit
        ORDER BY table_name
    LOOP
        RAISE NOTICE '';
        RAISE NOTICE 'TABLE: %', tbl.table_name;
        RAISE NOTICE '-----------------------------------------------------------------------------------------------------------------';
        RAISE NOTICE 'ROLE / USER                | LOGIN? | INHERITED FROM               | S | I | U | D |';
        RAISE NOTICE '---------------------------+--------+------------------------------+---+---+---+---|';

        -- For each table, loop through every role and user in the database
        FOR rol IN
            SELECT
                r.rolname,
                r.rolcanlogin,
                -- This subquery constructs the "Inherited From" list.
                COALESCE(
                    (SELECT string_agg(parent.rolname, ', ')
                     FROM pg_auth_members am
                     JOIN pg_roles parent ON am.roleid = parent.oid
                     WHERE am.member = r.oid),
                    ''
                ) AS inherited_roles
            FROM pg_catalog.pg_roles r
            ORDER BY r.rolname
        LOOP
            -- This is the core logic change. The report now only includes a role if it has
            -- BOTH the prerequisite USAGE on the schema AND at least one S/I/U/D permission
            -- on the table itself. This ensures we only report on effective permissions.
            IF has_schema_privilege(rol.rolname, schema_to_audit, 'USAGE') AND
               has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'SELECT, INSERT, UPDATE, DELETE') THEN

                permission_matrix := '';

                -- We use has_table_privilege() for each check because it automatically
                -- resolves the full inheritance chain.
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'SELECT') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'INSERT') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'UPDATE') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'DELETE') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;

                RAISE NOTICE '% | % | % |%',
                    rpad(rol.rolname, 26),
                    CASE WHEN rol.rolcanlogin THEN ' Yes  ' ELSE ' No   ' END,
                    rpad(rol.inherited_roles, 28),
                    permission_matrix;
            END IF;
        END LOOP;
    END LOOP;
    RAISE NOTICE '';
    -- Updated final line for accuracy and to avoid false assurance.
    RAISE NOTICE 'Effective permission report for schema ''%'' complete.', schema_to_audit;
END $$;


