-- =============================================================================
-- SCHEMA PERMISSION MATRIX SCRIPT (v3 - Full CRUD with Login Status)
-- This script checks for full CRUD (Create, Read, Update, Delete) access.
-- It checks for USAGE on the schema, SIUD on each table, and now
-- explicitly states whether a role has LOGIN permission.
-- =============================================================================
DO $$
DECLARE
    -- V V V  --  CONFIGURE YOUR SCHEMA NAME HERE  --  V V V
    schema_to_audit TEXT := 'public';
    -- ^ ^ ^  --  CONFIGURE YOUR SCHEMA NAME HERE  --  ^ ^ ^

    tbl RECORD;
    rol RECORD;
    permission_matrix TEXT;
BEGIN
    RAISE NOTICE 'Starting full permission audit for schema: %', schema_to_audit;
    RAISE NOTICE '====================================================';
    RAISE NOTICE '';

    -- Part 1: Audit USAGE permission on the Schema itself
    RAISE NOTICE 'SCHEMA USAGE PERMISSIONS (Prerequisite for any table access)';
    RAISE NOTICE '----------------------------------------------------';
    FOR rol IN SELECT rolname FROM pg_catalog.pg_roles ORDER BY rolname LOOP
        IF has_schema_privilege(rol.rolname, schema_to_audit, 'USAGE') THEN
            RAISE NOTICE '- Role/User "%" has USAGE permission.', rol.rolname;
        END IF;
    END LOOP;
    RAISE NOTICE '----------------------------------------------------';


    -- Part 2: Audit SELECT, INSERT, UPDATE, DELETE permissions for each table
    FOR tbl IN
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = schema_to_audit
        ORDER BY table_name
    LOOP
        RAISE NOTICE '';
        RAISE NOTICE 'TABLE: %', tbl.table_name;
        RAISE NOTICE '-------------------------------------------------------------------------';
        RAISE NOTICE 'ROLE / USER                | LOGIN? | S | I | U | D |';
        RAISE NOTICE '---------------------------+--------+---+---+---+---|';

        -- For each table, loop through every role and user in the database
        FOR rol IN
            SELECT rolname, rolcanlogin
            FROM pg_catalog.pg_roles
            ORDER BY rolname
        LOOP
            -- Check if the role has any of the main privileges on the table
            IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'SELECT, INSERT, UPDATE, DELETE') THEN
                permission_matrix := '';
                -- Check for SELECT
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'SELECT') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;
                -- Check for INSERT
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'INSERT') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;
                -- Check for UPDATE
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'UPDATE') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;
                -- Check for DELETE
                IF has_table_privilege(rol.rolname, schema_to_audit || '.' || tbl.table_name, 'DELETE') THEN permission_matrix := permission_matrix || ' X |'; ELSE permission_matrix := permission_matrix || '   |'; END IF;

                RAISE NOTICE '% | % |%',
                    rpad(rol.rolname, 26),
                    CASE WHEN rol.rolcanlogin THEN ' Yes  ' ELSE ' No   ' END,
                    permission_matrix;
            END IF;
        END LOOP;
    END LOOP;
    RAISE NOTICE '';
    RAISE NOTICE 'Full permission audit complete.';
END $$;
